/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package weightList;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-09-07")
public class Weights implements org.apache.thrift.TBase<Weights, Weights._Fields>, java.io.Serializable, Cloneable, Comparable<Weights> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Weights");

  private static final org.apache.thrift.protocol.TField DIMENSION_FIELD_DESC = new org.apache.thrift.protocol.TField("dimension", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField WEIGHTS_FIELD_DESC = new org.apache.thrift.protocol.TField("weights", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new WeightsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new WeightsTupleSchemeFactory();

  public java.util.List<java.lang.Integer> dimension; // required
  public java.util.List<java.lang.Double> weights; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DIMENSION((short)1, "dimension"),
    WEIGHTS((short)2, "weights");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DIMENSION
          return DIMENSION;
        case 2: // WEIGHTS
          return WEIGHTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DIMENSION, new org.apache.thrift.meta_data.FieldMetaData("dimension", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.WEIGHTS, new org.apache.thrift.meta_data.FieldMetaData("weights", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Weights.class, metaDataMap);
  }

  public Weights() {
  }

  public Weights(
    java.util.List<java.lang.Integer> dimension,
    java.util.List<java.lang.Double> weights)
  {
    this();
    this.dimension = dimension;
    this.weights = weights;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Weights(Weights other) {
    if (other.isSetDimension()) {
      java.util.List<java.lang.Integer> __this__dimension = new java.util.ArrayList<java.lang.Integer>(other.dimension);
      this.dimension = __this__dimension;
    }
    if (other.isSetWeights()) {
      java.util.List<java.lang.Double> __this__weights = new java.util.ArrayList<java.lang.Double>(other.weights);
      this.weights = __this__weights;
    }
  }

  public Weights deepCopy() {
    return new Weights(this);
  }

  @Override
  public void clear() {
    this.dimension = null;
    this.weights = null;
  }

  public int getDimensionSize() {
    return (this.dimension == null) ? 0 : this.dimension.size();
  }

  public java.util.Iterator<java.lang.Integer> getDimensionIterator() {
    return (this.dimension == null) ? null : this.dimension.iterator();
  }

  public void addToDimension(int elem) {
    if (this.dimension == null) {
      this.dimension = new java.util.ArrayList<java.lang.Integer>();
    }
    this.dimension.add(elem);
  }

  public java.util.List<java.lang.Integer> getDimension() {
    return this.dimension;
  }

  public Weights setDimension(java.util.List<java.lang.Integer> dimension) {
    this.dimension = dimension;
    return this;
  }

  public void unsetDimension() {
    this.dimension = null;
  }

  /** Returns true if field dimension is set (has been assigned a value) and false otherwise */
  public boolean isSetDimension() {
    return this.dimension != null;
  }

  public void setDimensionIsSet(boolean value) {
    if (!value) {
      this.dimension = null;
    }
  }

  public int getWeightsSize() {
    return (this.weights == null) ? 0 : this.weights.size();
  }

  public java.util.Iterator<java.lang.Double> getWeightsIterator() {
    return (this.weights == null) ? null : this.weights.iterator();
  }

  public void addToWeights(double elem) {
    if (this.weights == null) {
      this.weights = new java.util.ArrayList<java.lang.Double>();
    }
    this.weights.add(elem);
  }

  public java.util.List<java.lang.Double> getWeights() {
    return this.weights;
  }

  public Weights setWeights(java.util.List<java.lang.Double> weights) {
    this.weights = weights;
    return this;
  }

  public void unsetWeights() {
    this.weights = null;
  }

  /** Returns true if field weights is set (has been assigned a value) and false otherwise */
  public boolean isSetWeights() {
    return this.weights != null;
  }

  public void setWeightsIsSet(boolean value) {
    if (!value) {
      this.weights = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case DIMENSION:
      if (value == null) {
        unsetDimension();
      } else {
        setDimension((java.util.List<java.lang.Integer>)value);
      }
      break;

    case WEIGHTS:
      if (value == null) {
        unsetWeights();
      } else {
        setWeights((java.util.List<java.lang.Double>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case DIMENSION:
      return getDimension();

    case WEIGHTS:
      return getWeights();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case DIMENSION:
      return isSetDimension();
    case WEIGHTS:
      return isSetWeights();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Weights)
      return this.equals((Weights)that);
    return false;
  }

  public boolean equals(Weights that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_dimension = true && this.isSetDimension();
    boolean that_present_dimension = true && that.isSetDimension();
    if (this_present_dimension || that_present_dimension) {
      if (!(this_present_dimension && that_present_dimension))
        return false;
      if (!this.dimension.equals(that.dimension))
        return false;
    }

    boolean this_present_weights = true && this.isSetWeights();
    boolean that_present_weights = true && that.isSetWeights();
    if (this_present_weights || that_present_weights) {
      if (!(this_present_weights && that_present_weights))
        return false;
      if (!this.weights.equals(that.weights))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetDimension()) ? 131071 : 524287);
    if (isSetDimension())
      hashCode = hashCode * 8191 + dimension.hashCode();

    hashCode = hashCode * 8191 + ((isSetWeights()) ? 131071 : 524287);
    if (isSetWeights())
      hashCode = hashCode * 8191 + weights.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Weights other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetDimension()).compareTo(other.isSetDimension());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDimension()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dimension, other.dimension);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWeights()).compareTo(other.isSetWeights());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeights()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weights, other.weights);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Weights(");
    boolean first = true;

    sb.append("dimension:");
    if (this.dimension == null) {
      sb.append("null");
    } else {
      sb.append(this.dimension);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("weights:");
    if (this.weights == null) {
      sb.append("null");
    } else {
      sb.append(this.weights);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WeightsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WeightsStandardScheme getScheme() {
      return new WeightsStandardScheme();
    }
  }

  private static class WeightsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Weights> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Weights struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DIMENSION
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.dimension = new java.util.ArrayList<java.lang.Integer>(_list0.size);
                int _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI32();
                  struct.dimension.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setDimensionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WEIGHTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.weights = new java.util.ArrayList<java.lang.Double>(_list3.size);
                double _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readDouble();
                  struct.weights.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setWeightsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Weights struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.dimension != null) {
        oprot.writeFieldBegin(DIMENSION_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.dimension.size()));
          for (int _iter6 : struct.dimension)
          {
            oprot.writeI32(_iter6);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.weights != null) {
        oprot.writeFieldBegin(WEIGHTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.weights.size()));
          for (double _iter7 : struct.weights)
          {
            oprot.writeDouble(_iter7);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WeightsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WeightsTupleScheme getScheme() {
      return new WeightsTupleScheme();
    }
  }

  private static class WeightsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Weights> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Weights struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetDimension()) {
        optionals.set(0);
      }
      if (struct.isSetWeights()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetDimension()) {
        {
          oprot.writeI32(struct.dimension.size());
          for (int _iter8 : struct.dimension)
          {
            oprot.writeI32(_iter8);
          }
        }
      }
      if (struct.isSetWeights()) {
        {
          oprot.writeI32(struct.weights.size());
          for (double _iter9 : struct.weights)
          {
            oprot.writeDouble(_iter9);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Weights struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.dimension = new java.util.ArrayList<java.lang.Integer>(_list10.size);
          int _elem11;
          for (int _i12 = 0; _i12 < _list10.size; ++_i12)
          {
            _elem11 = iprot.readI32();
            struct.dimension.add(_elem11);
          }
        }
        struct.setDimensionIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.weights = new java.util.ArrayList<java.lang.Double>(_list13.size);
          double _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = iprot.readDouble();
            struct.weights.add(_elem14);
          }
        }
        struct.setWeightsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

