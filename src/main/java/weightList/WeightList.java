/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package weightList;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-09-07")
public class WeightList implements org.apache.thrift.TBase<WeightList, WeightList._Fields>, java.io.Serializable, Cloneable, Comparable<WeightList> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WeightList");

  private static final org.apache.thrift.protocol.TField LIST_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("listNum", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField WEIGHT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("weightList", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new WeightListStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new WeightListTupleSchemeFactory();

  public int listNum; // required
  public java.util.List<Weights> weightList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LIST_NUM((short)1, "listNum"),
    WEIGHT_LIST((short)2, "weightList");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LIST_NUM
          return LIST_NUM;
        case 2: // WEIGHT_LIST
          return WEIGHT_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LISTNUM_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LIST_NUM, new org.apache.thrift.meta_data.FieldMetaData("listNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WEIGHT_LIST, new org.apache.thrift.meta_data.FieldMetaData("weightList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Weights.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WeightList.class, metaDataMap);
  }

  public WeightList() {
    this.listNum = 0;

  }

  public WeightList(
    int listNum,
    java.util.List<Weights> weightList)
  {
    this();
    this.listNum = listNum;
    setListNumIsSet(true);
    this.weightList = weightList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WeightList(WeightList other) {
    __isset_bitfield = other.__isset_bitfield;
    this.listNum = other.listNum;
    if (other.isSetWeightList()) {
      java.util.List<Weights> __this__weightList = new java.util.ArrayList<Weights>(other.weightList.size());
      for (Weights other_element : other.weightList) {
        __this__weightList.add(new Weights(other_element));
      }
      this.weightList = __this__weightList;
    }
  }

  public WeightList deepCopy() {
    return new WeightList(this);
  }

  @Override
  public void clear() {
    this.listNum = 0;

    this.weightList = null;
  }

  public int getListNum() {
    return this.listNum;
  }

  public WeightList setListNum(int listNum) {
    this.listNum = listNum;
    setListNumIsSet(true);
    return this;
  }

  public void unsetListNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LISTNUM_ISSET_ID);
  }

  /** Returns true if field listNum is set (has been assigned a value) and false otherwise */
  public boolean isSetListNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LISTNUM_ISSET_ID);
  }

  public void setListNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LISTNUM_ISSET_ID, value);
  }

  public int getWeightListSize() {
    return (this.weightList == null) ? 0 : this.weightList.size();
  }

  public java.util.Iterator<Weights> getWeightListIterator() {
    return (this.weightList == null) ? null : this.weightList.iterator();
  }

  public void addToWeightList(Weights elem) {
    if (this.weightList == null) {
      this.weightList = new java.util.ArrayList<Weights>();
    }
    this.weightList.add(elem);
  }

  public java.util.List<Weights> getWeightList() {
    return this.weightList;
  }

  public WeightList setWeightList(java.util.List<Weights> weightList) {
    this.weightList = weightList;
    return this;
  }

  public void unsetWeightList() {
    this.weightList = null;
  }

  /** Returns true if field weightList is set (has been assigned a value) and false otherwise */
  public boolean isSetWeightList() {
    return this.weightList != null;
  }

  public void setWeightListIsSet(boolean value) {
    if (!value) {
      this.weightList = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case LIST_NUM:
      if (value == null) {
        unsetListNum();
      } else {
        setListNum((java.lang.Integer)value);
      }
      break;

    case WEIGHT_LIST:
      if (value == null) {
        unsetWeightList();
      } else {
        setWeightList((java.util.List<Weights>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case LIST_NUM:
      return getListNum();

    case WEIGHT_LIST:
      return getWeightList();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case LIST_NUM:
      return isSetListNum();
    case WEIGHT_LIST:
      return isSetWeightList();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof WeightList)
      return this.equals((WeightList)that);
    return false;
  }

  public boolean equals(WeightList that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_listNum = true;
    boolean that_present_listNum = true;
    if (this_present_listNum || that_present_listNum) {
      if (!(this_present_listNum && that_present_listNum))
        return false;
      if (this.listNum != that.listNum)
        return false;
    }

    boolean this_present_weightList = true && this.isSetWeightList();
    boolean that_present_weightList = true && that.isSetWeightList();
    if (this_present_weightList || that_present_weightList) {
      if (!(this_present_weightList && that_present_weightList))
        return false;
      if (!this.weightList.equals(that.weightList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + listNum;

    hashCode = hashCode * 8191 + ((isSetWeightList()) ? 131071 : 524287);
    if (isSetWeightList())
      hashCode = hashCode * 8191 + weightList.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(WeightList other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetListNum()).compareTo(other.isSetListNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetListNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listNum, other.listNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWeightList()).compareTo(other.isSetWeightList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeightList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weightList, other.weightList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("WeightList(");
    boolean first = true;

    sb.append("listNum:");
    sb.append(this.listNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("weightList:");
    if (this.weightList == null) {
      sb.append("null");
    } else {
      sb.append(this.weightList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WeightListStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WeightListStandardScheme getScheme() {
      return new WeightListStandardScheme();
    }
  }

  private static class WeightListStandardScheme extends org.apache.thrift.scheme.StandardScheme<WeightList> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WeightList struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LIST_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.listNum = iprot.readI32();
              struct.setListNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WEIGHT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.weightList = new java.util.ArrayList<Weights>(_list16.size);
                Weights _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new Weights();
                  _elem17.read(iprot);
                  struct.weightList.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setWeightListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WeightList struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LIST_NUM_FIELD_DESC);
      oprot.writeI32(struct.listNum);
      oprot.writeFieldEnd();
      if (struct.weightList != null) {
        oprot.writeFieldBegin(WEIGHT_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.weightList.size()));
          for (Weights _iter19 : struct.weightList)
          {
            _iter19.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WeightListTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WeightListTupleScheme getScheme() {
      return new WeightListTupleScheme();
    }
  }

  private static class WeightListTupleScheme extends org.apache.thrift.scheme.TupleScheme<WeightList> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WeightList struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetListNum()) {
        optionals.set(0);
      }
      if (struct.isSetWeightList()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetListNum()) {
        oprot.writeI32(struct.listNum);
      }
      if (struct.isSetWeightList()) {
        {
          oprot.writeI32(struct.weightList.size());
          for (Weights _iter20 : struct.weightList)
          {
            _iter20.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WeightList struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.listNum = iprot.readI32();
        struct.setListNumIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.weightList = new java.util.ArrayList<Weights>(_list21.size);
          Weights _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = new Weights();
            _elem22.read(iprot);
            struct.weightList.add(_elem22);
          }
        }
        struct.setWeightListIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

